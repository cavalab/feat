{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Using Longitudinal Data\n",
    "=======================\n",
    "\n",
    "This example demonstrates how to do cross validation with longitudinal\n",
    "data.\n",
    "By *longitudinal*, we mean predictors for specific samples that have more than one value. \n",
    "This could be time series data or any other sequential data we might want to model. \n",
    "\n",
    "\n",
    "Example Patient Data\n",
    "------------------------------\n",
    "\n",
    "First, we generate some example data and store it using this script: https://github.com/lacava/feat/blob/master/docs/examples/longitudinal/generate_example_longitudinal_data.py. \n",
    "\n",
    "Let’s imagine we have patient data from a hospital. \n",
    "This means we have measurements from different visits, with different numbers of measurements from different\n",
    "patients collected in non-uniform intervals.\n",
    "In this example, we make up a risk model in which risk increases for a\n",
    "patient with an increasing body mass index (BMI) and a high maximum\n",
    "glucose level in their blood panel."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import KFold\n",
    "\n",
    "random_state=42\n",
    "\n",
    "df = pd.read_csv('data/d_example_patients.csv')\n",
    "df.drop('id',axis=1,inplace=True)\n",
    "X = df.drop('target',axis=1)\n",
    "y = df['target']\n",
    "zfile = 'data/d_example_patients_long.csv'\n",
    "kf = KFold(n_splits=3,shuffle=True,random_state=random_state)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "Next we set up the learner. We need to declare the longitudinal\n",
    "operators we want to search over. They are defined as a comma-delimited\n",
    "list of strings using the ``functions`` argument. In this case, the\n",
    "operators on the second row of the declaration below all operate on\n",
    "longitudinal data.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from feat import Feat\n",
    "\n",
    "clf = Feat(max_depth=5,\n",
    "           max_dim=5,\n",
    "           gens = 100,\n",
    "           pop_size = 100,\n",
    "           max_time = 30, # seconds\n",
    "           verbosity=2,\n",
    "           shuffle=True,\n",
    "           normalize=False, # don't normalize input data\n",
    "           functions=\"and,or,not,split,split_c,\"\n",
    "                     \"mean,median,max,min,variance,skew,kurtosis,slope,count\",\n",
    "           backprop=True,\n",
    "           batch_size=10,\n",
    "           iters=10,\n",
    "           random_state=random_state,\n",
    "           n_jobs=1,\n",
    "           simplify=0.01    # prune final representations\n",
    "          )\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Cross validation\n",
    "----------------\n",
    "\n",
    "Cross validation works a little bit differently with longitudinal data. \n",
    "The block below shows how to train a model using Kfold cross validation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "scores: [0.0019200502112349603, 0.0013323824931506492, 0.020377830997444116]\n"
     ]
    }
   ],
   "source": [
    "scores=[]\n",
    "\n",
    "for train_idx, test_idx in kf.split(X,y):\n",
    "    # print('train_idx:',train_idx)\n",
    "    # note that the train index is passed to FEAT's fit method\n",
    "    clf.fit(X.loc[train_idx],y.loc[train_idx],zfile,train_idx) \n",
    "    scores.append(clf.score(X.loc[test_idx],y.loc[test_idx],zfile,test_idx))\n",
    "\n",
    "print('scores:',scores)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Model Interpretation\n",
    "--------------------\n",
    "\n",
    "Now let’s fit a model to all the data and try to interpret it.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "fitting longer to all data...\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Feat(backprop=True, batch_size=10, feature_names='sex,race',\n",
       "     functions='and,or,not,split,split_c,mean,median,max,min,variance,skew,kurtosis,slope,count',\n",
       "     max_depth=5, max_dim=5, max_time=30, normalize=False, random_state=42,\n",
       "     simplify=0.01, verbosity=2)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# fit to all data\n",
    "\n",
    "print('fitting longer to all data...')\n",
    "clf.verbosity = 2\n",
    "clf.fit(X,y,zfile,np.arange(len(X)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "To see the learned representation, we run ``clf.get_representation()``:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'[slope(z_bmi)][max(z_glucose)]'"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf.get_representation()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here our final representation is composed of ``slope(z_bmi)`` and\n",
    "``max(z_glucose)``, both of which we know to be correct features for\n",
    "this simulated dataset. The best training representation displays clear\n",
    "overfitting, highlighting the importance of using archive validation for\n",
    "model selection.\n",
    "We can also look at the representation with the model weights, sorted by\n",
    "magnitude, using ``clf.get_model()``:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Weight\tFeature\n",
      "8.23132\toffset\n",
      "0.80\tslope(z_bmi)\n",
      "0.73\tmax(z_glucose)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(clf.get_model())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "View runtime stats\n",
    "------------------\n",
    "\n",
    "FEAT stores statistics about the training procedure in a dictionary `clf.stats_`. \n",
    "An example of plotting from this dictionary is shown below."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dict_keys(['generation', 'med_complexity', 'med_dim', 'med_loss', 'med_loss_v', 'med_num_params', 'med_size', 'min_loss', 'min_loss_v', 'time'])"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf.stats_.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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1BwxbhwcOwZvvAEXX5ztaEQkSQMHDuStt97KdhhpkfHk4e5LzKxvo8NjgM3uvgXAzOYCU93934BLm/I5ZjYbmA3Qp0+fpgecC8aOhTZtYOlSJQ8RyQm5stqqF7Cjwevq2mNRmVk3M3sIKDez26K1cfc57l7h7hU9ekSt354/OnUK7ojSiisRyRG5stoq2q5/MWfy3X03cEP6wslBkQg8/DAcPgwpFGwREUmHXOl5VANnNXjdG9iZpVhyUyQCBw9CKx0/FZH8kivJYyUw0Mz6mVk7YCawIMsx5RbdLCiSdqeccgoAO3fuZNq06HcBTJw4kURL/++9914OHDhQ/3rKlCktsvfUXXfdxd13393s67SEbCzVfQZYDgw2s2ozu87djwA3Aa8CG4B57r4u07HltJ49YcCAYNJcRNLqzDPPZP78+U1+f+PksXDhwri1QfJRxpOHu89y957uXuzuvd39kdrjC919kLsPcPcfZzquvFC3SWIe3tgpkmm33HILDz74YP3ru+66i5/97Gfs37+fCy+8kJEjR1JWVsZ//dd/nfDebdu2MWzYMAAOHjzIzJkzCYVCXHHFFcftbXXjjTdSUVFBaWkpd955JxBstrhz507OP/98zj//fCAo9vTRRx8B8POf/5xhw4YxbNgw7q3d9Gvbtm0MHTqUb33rW5SWlvLVr3415h5add5++23Gjh1LKBTisssuq9/65L777qOkpIRQKFS/KeMf/vAHRowYwYgRIygvL4+7bUvSYu3V3poeeVvPo7GHHw7qe2zcmO1IRBI6rj7EzTe7T5jQso+bb477+atXr/bx48fXvx46dKhv377dDx8+7Hv37nV395qaGh8wYIAfO3bM3d07duzo7u5bt2710tJSdw/qa1x77bXu7r5mzRovKirylStXurv77t273d39yJEjPmHCBF+zZo27H1+fo+HryspKHzZsmO/fv9/37dvnJSUlvnr1at+6dasXFRX5W2+95e7u06dP9yeeeOKE3+nOO+/0n/70p+7uXlZW5osXL3Z399tvv91vrv3z6Nmzpx86dMjd3T/55BN3d7/00kt92bJl7u6+b98+P3z48AnXTrWeR67MeUgyxo0LfmreQySh8vJydu3axc6dO1mzZg1du3alT58+uDs//OEPCYVCXHTRRbz//vt8+OGHMa+zZMmS+vodoVCIUChUf27e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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "plt.plot(clf.stats_['time'], clf.stats_['min_loss'], 'b', label='training loss')\n",
    "plt.plot(clf.stats_['time'], clf.stats_['min_loss_v'], 'r', label='validation loss')\n",
    "plt.legend()\n",
    "plt.xlabel('Time (s)')\n",
    "plt.ylabel('MSE')\n",
    "plt.gca().set_yscale('log')\n",
    "plt.gca().set_xscale('log')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "plt.plot(clf.stats_['time'], clf.stats_['med_complexity'], 'b', label='median complexity')\n",
    "# plt.plot(clf.stats_['time'], clf.stats_['med_size'], 'r', label='median size')\n",
    "plt.legend()\n",
    "plt.xlabel('Time (s)')\n",
    "plt.ylabel('Median Complexity')\n",
    "# plt.gca().set_yscale('log')\n",
    "plt.gca().set_xscale('log')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Visualizing the representation\n",
    "------------------------------\n",
    "\n",
    "Here we take the two relevant features and plot the data with them.\n",
    "This shows us the risk surface as a function of these learned features."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "proj: (993, 2)\n",
      "rep: ['slope(z_bmi)', 'max(z_glucose)']\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x432 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualize the representation\n",
    "\n",
    "proj = clf.transform(X,zfile,np.arange(len(X)))\n",
    "\n",
    "print('proj:',proj.shape)\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import matplotlib.patheffects as PathEffects\n",
    "from matplotlib import cm\n",
    "\n",
    "cm = plt.cm.get_cmap('RdBu')\n",
    "# We choose a color palette with seaborn.\n",
    "# palette = np.array(sns.color_palette(\"cividis\", np.unique(y)))\n",
    "\n",
    "# We create a scatter plot.\n",
    "f = plt.figure(figsize=(6, 6))\n",
    "ax = plt.subplot(aspect='equal')\n",
    "sc = ax.scatter(proj[:,0], proj[:,1], lw=0, s=20,\n",
    "                c=y, cmap=cm)\n",
    "plt.colorbar(sc)\n",
    "# sc.colorbar()\n",
    "ax.axis('square')\n",
    "# ax.axis('off')\n",
    "ax.axis('tight')\n",
    "\n",
    "# add labels from representation\n",
    "rep = [r.split('[')[-1] for r in clf.get_representation().split(']') if r != '']\n",
    "print('rep:',rep)\n",
    "plt.xlabel(rep[0])\n",
    "plt.ylabel(rep[1])\n",
    "\n",
    "# plt.savefig('longitudinal_representation.svg', dpi=120)\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
