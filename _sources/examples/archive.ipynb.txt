{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Using Feat's archive\n",
    "\n",
    "Feat optimizes a population of models. \n",
    "At the end of the run, it can be useful to explore this population to find a trade-off between objectives, \n",
    "such as performance and complexity. \n",
    "\n",
    "In this example, we apply Feat to a regression problem and visualize the archive of representations. \n",
    "\n",
    "Note: this code uses the Penn ML Benchmark Suite (https://github.com/EpistasisLab/penn-ml-benchmarks/) to fetch data. You can install it using `pip install pmlb`.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First, we import the data and create a train-test split."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pmlb import fetch_data\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import mean_squared_error as mse\n",
    "import numpy as np\n",
    "# fix the random state\n",
    "random_state=42\n",
    "dataset='690_visualizing_galaxy'\n",
    "X, y = fetch_data(dataset,return_X_y=True)\n",
    "X_t,X_v, y_t, y_v = train_test_split(X,y,train_size=0.75,test_size=0.25,random_state=random_state)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then we set up a Feat instance and train the model, storing the final archive."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "FEAT version: 0.4.1.post30\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Feat(hillclimb=True, max_depth=2, max_dim=5, max_time=60, pop_size=500,\n",
       "     random_state=42, verbosity=2)"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from feat import Feat\n",
    "\n",
    "\n",
    "fest = Feat(pop_size=500, # population size\n",
    "            gens=100, # maximum generations                            \n",
    "            max_time=60, # max time in seconds \n",
    "            max_depth=2, # constrain features depth                                                      \n",
    "            max_dim=5, # constrain representation dimensionality                                                      \n",
    "            random_state=random_state,                                                            \n",
    "            hillclimb=True, # use stochastic hillclimbing to optimize weights                                                   \n",
    "            iters=10, # iterations of hillclimbing\n",
    "            n_jobs=1, # restricts to single thread                                                      \n",
    "            verbosity=2, # verbose output (this will go to terminal, sry..)                                                      \n",
    "           ) \n",
    "\n",
    "print('FEAT version:', fest.__version__)\n",
    "# train the model\n",
    "fest.fit(X_t,y_t)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "complexity fitness validation fitness eqn\n",
      "1 1804.70947265625 1815.92822265625 [x_1]\n",
      "2 967.038330078125 1090.6053466796875 [x_1][x_0]\n",
      "3 931.5263061523438 916.8345336914062 [x_0][x_1][x_3]\n",
      "4 912.5177001953125 862.1056518554688 [x_0][x_1][x_2][x_3]\n",
      "6 669.4453735351562 900.9910888671875 [x_1][x_0][relu(0.00*x_1)]\n",
      "7 467.7828369140625 704.1397094726562 [x_0][tanh(1.26*x_1)]\n",
      "8 424.2886657714844 512.7071533203125 [x_0][tanh(1.34*x_1)][x_3]\n",
      "9 383.1601867675781 463.29949951171875 [tanh(1.39*x_1)][x_2][x_0][x_3]\n",
      "10 375.2489318847656 511.86627197265625 [tanh(0.98*x_1)][x_1][x_3][x_2][x_0]\n",
      "12 350.7279357910156 492.56195068359375 [tanh(2.54*x_0)][tanh(1.29*x_1)]\n",
      "13 319.4396667480469 426.8195495605469 [tanh(1.33*x_1)][x_2][tanh(2.41*x_0)]\n",
      "14 301.9866638183594 386.4537048339844 [tanh(1.38*x_1)][x_3][x_2][tanh(2.79*x_0)]\n",
      "15 297.632568359375 394.12969970703125 [tanh(2.86*x_0)][x_1][x_3][x_2][tanh(1.05*x_1)]\n",
      "17 282.73626708984375 392.1083068847656 [tanh(2.62*x_0)][relu(0.63*x_3)][x_2][tanh(1.39*x_1)]\n",
      "18 276.8981018066406 403.6515808105469 [tanh(2.66*x_0)][x_1][relu(0.61*x_3)][x_2][tanh(1.03*x_1)]\n",
      "19 266.9380187988281 261.5851135253906 [(0.26*x_2*(1.32*x_0+0.26*x_1))][x_0][x_1][tanh(1.14*x_1)][x_3]\n",
      "21 252.79739379882812 391.8340148925781 [(0.30*x_1*sqrt(|0.30*x_3|))][(0.44*x_2-0.01*x_1)][tanh(2.03*x_0)]\n",
      "22 249.07005310058594 313.2448425292969 [(0.28*x_2*(1.06*x_0+0.24*x_1))][x_1][x_0][tanh(1.11*x_1)][sqrt(|0.18*x_3|)]\n",
      "24 233.05250549316406 246.5561981201172 [(0.32*x_2*(1.16*x_0+0.27*x_1))][tanh(2.00*x_0)][x_0][x_1][sin(1.98*x_1)]\n",
      "26 215.35858154296875 1645.1624755859375 [tanh(1.18*x_1)][tanh(2.25*x_0)][x_3][(0.35*x_1-0.34*x_0)][(0.19*x_2*(1.42*x_0+0.29*x_1))]\n",
      "29 203.5608367919922 249.9871368408203 [(0.48*x_1+0.56*sqrt(|0.17*x_3|))][x_0][tanh(1.17*x_1)][(0.48*x_2*(0.29*x_0+0.07*x_1))][tanh(2.01*x_0)]\n",
      "30 202.99911499023438 258.62847900390625 [tanh(1.18*x_1)][tanh(1.88*x_0)][(0.46*x_1+0.18*(0.27*x_0-0.34*sqrt(|0.29*x_1|)))][(0.18*x_2*(0.74*x_0+0.19*x_1))]\n",
      "31 190.41644287109375 241.6823272705078 [tanh(1.20*x_1)][tanh(2.20*x_0)][x_3][(0.58*x_1+0.14*(0.19*x_0-0.25*sqrt(|0.19*x_3|)))][(0.23*x_2*(1.01*x_0+0.21*x_1))]\n",
      "36 188.87777709960938 259.40362548828125 [tanh(1.19*x_1)][tanh(1.98*x_0)][(0.48*x_1+0.17*(0.20*x_0-0.29*sqrt(|0.28*x_3|)))][(0.08*x_2*(1.30*x_0+0.30*x_1))][(0.88*x_2/0.95*x_0)]\n",
      "38 189.1365966796875 232.5410614013672 [tanh(1.22*x_1)][tanh(2.08*x_0)][(0.57*x_1+0.11*(0.25*x_0-0.23*sqrt(|0.18*x_3|)))][(0.23*x_2*(1.00*x_0+0.21*x_1))][exp(0.27*x_3)]\n",
      "46 181.5760498046875 239.0564727783203 [tanh(1.19*x_1)][tanh(1.98*x_0)][(0.48*x_1+0.17*(0.20*x_0-0.29*sqrt(|0.28*x_3|)))][(0.08*x_2*(1.30*x_0+0.30*x_1))][(0.88*x_2/0.95*tanh(1.85*x_0))]\n",
      "98 178.29383850097656 255.6151885986328 [tanh(1.05*x_1)][exp(0.58*tanh(1.79*x_0))][(0.31*x_3-0.88*log(1.37*(0.06*x_0/0.59*(0.47*x_3+1.14*x_2))))][(0.73*x_1+0.22*(0.15*x_0-0.26*sqrt(|0.15*x_3|)))][(0.28*x_2*(1.15*x_0+0.26*x_1))]\n",
      "104 177.51222229003906 253.17242431640625 [tanh(1.11*x_1)][exp(0.58*tanh(1.79*x_0))][(0.31*x_3-0.88*log(1.37*(0.06*x_0/0.59*(0.47*x_3+1.14*x_2))))][(0.73*x_1+0.22*(0.15*x_0-0.26*sqrt(|0.83*sqrt(|0.15*x_3|)|)))][(0.28*x_2*(1.15*x_0+0.26*x_1))]\n",
      "147 174.20518493652344 1227.4205322265625 [tanh(1.20*tanh(0.64*x_1))][exp(0.63*tanh(2.07*x_0))][(0.27*x_3-0.72*log(1.95*(0.04*x_0/0.79*(0.47*x_3+1.20*x_2))))][(0.55*x_1+0.21*(0.23*x_0-0.24*sqrt(|0.17*x_3|)))][exp(0.64*(0.21*x_2*(1.43*x_0+0.33*x_1)))]\n"
     ]
    }
   ],
   "source": [
    "# get the test score\n",
    "test_score = {}\n",
    "test_score['feat'] = mse(y_v,fest.predict(X_v))\n",
    "\n",
    "# store the archive\n",
    "archive = fest.get_archive(justfront=True)\n",
    "\n",
    "# print the archive\n",
    "print('complexity','fitness','validation fitness',\n",
    "     'eqn')\n",
    "order = np.argsort([a['complexity'] for a in archive])\n",
    "complexity = []\n",
    "fit_train = []\n",
    "fit_test = []\n",
    "eqn = []\n",
    "\n",
    "for o in order:\n",
    "    model = archive[o]\n",
    "    if model['rank'] == 1:\n",
    "        print(model['complexity'],\n",
    "              model['fitness'],\n",
    "              model['fitness_v'],\n",
    "              model['eqn'],\n",
    "             )\n",
    "\n",
    "        complexity.append(model['complexity'])\n",
    "        fit_train.append(model['fitness'])\n",
    "        fit_test.append(model['fitness_v'])\n",
    "        eqn.append(model['eqn'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "scrolled": true
   },
   "source": [
    "For comparison, we can fit an Elastic Net and Random Forest regression model to the same data.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestRegressor\n",
    "\n",
    "rf = RandomForestRegressor(random_state=random_state)\n",
    "\n",
    "rf.fit(X_t,y_t)\n",
    "\n",
    "test_score['rf'] = mse(y_v,rf.predict(X_v))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import ElasticNet\n",
    "\n",
    "linest = ElasticNet()\n",
    "\n",
    "linest.fit(X_t,y_t)\n",
    "\n",
    "test_score['elasticnet'] = mse(y_v,linest.predict(X_v))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's look at the test set mean squared errors by method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'feat': 258.74213477932375,\n",
       " 'rf': 347.15749506172847,\n",
       " 'elasticnet': 919.3515337699562}"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_score"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Visualizing the Archive\n",
    "\n",
    "Let's visualize this archive with the test scores. This gives us a sense of how increasing the representation\n",
    "complexity affects the quality of the model and its generalization.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "best: 38\n",
      "middle: 22\n",
      "small: 3\n",
      "complexity [1, 2, 3, 4, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 19, 21, 22, 24, 26, 29, 30, 31, 36, 38, 46, 98, 104, 147]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1008x576 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import math\n",
    "\n",
    "matplotlib.rcParams['figure.figsize'] = (10, 6)\n",
    "%matplotlib inline \n",
    "sns.set_style('white')\n",
    "h = plt.figure(figsize=(14,8))\n",
    "\n",
    "# plot archive points \n",
    "plt.plot(fit_train,complexity,'--ro',label='Train',markersize=6)\n",
    "plt.plot(fit_test,complexity,'--bx',label='Validation')\n",
    "# some models to point out\n",
    "best = np.argmin(np.array(fit_test))\n",
    "middle = np.argmin(np.abs(np.array(fit_test[:best])-test_score['rf']))\n",
    "small = np.argmin(np.abs(np.array(fit_test[:middle])-test_score['elasticnet']))\n",
    "\n",
    "print('best:',complexity[best])\n",
    "print('middle:',complexity[middle])\n",
    "print('small:',complexity[small])\n",
    "plt.plot(fit_test[best],complexity[best],'sk',markersize=16,markerfacecolor='none',label='Model Selection')\n",
    "\n",
    "# test score lines\n",
    "y1 = -1\n",
    "y2 = np.max(complexity)+1\n",
    "plt.plot((test_score['feat'],test_score['feat']),(y1,y2),'--k',label='FEAT Test',alpha=0.5)\n",
    "plt.plot((test_score['rf'],test_score['rf']),(y1,y2),'-.xg',label='RF Test',alpha=0.5)\n",
    "plt.plot((test_score['elasticnet'],test_score['elasticnet']),(y1,y2),'-sm',label='ElasticNet Test',alpha=0.5)\n",
    "\n",
    "print('complexity',complexity)\n",
    "xoff = 100\n",
    "for e,t,c in zip(eqn,fit_test,complexity):\n",
    "    if c in [complexity[best],complexity[middle],complexity[small]]:\n",
    "        t = t+xoff\n",
    "        tax = plt.text(t,c,'$\\leftarrow'+e+'$',size=18,horizontalalignment='left',\n",
    "                      verticalalignment='center')\n",
    "        tax.set_bbox(dict(facecolor='white', alpha=0.75, edgecolor='k'))\n",
    "\n",
    "l = plt.legend(prop={'size': 16},loc=[1.01,0.25])\n",
    "plt.xlabel('MSE',size=16)\n",
    "plt.xlim(np.min(fit_train)*.75,np.max(fit_test)*2)\n",
    "plt.gca().set_xscale('log')\n",
    "plt.gca().set_yscale('log')\n",
    "\n",
    "plt.gca().set_yticklabels('')\n",
    "plt.gca().set_xticklabels('')\n",
    "\n",
    "plt.ylabel('Complexity',size=18)\n",
    "h.tight_layout()\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that ElasticNet produces a similar test score to the linear representation\n",
    "in Feat's archive, and that Random Forest's test score is near the representation shown in the middle.\n",
    "\n",
    "The best model, marked with a square, is selected from the validation curve (blue line).\n",
    "The validation curve shows how models begin to overfit as complexity grows.\n",
    "By visualizing the archive, we can see that some lower complexity models achieve nearly as good of a validation score.\n",
    "In this case it may be preferable to choose that representation instead."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "By default, FEAT will choose the model with the lowest validation error, marked with a square above. \n",
    "Let's look at that model.\n",
    "\n",
    "the function `get_model()` will print a table of the learned features, optionally ordered by the magnitude of their weights."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Weight\tFeature\n",
      "1590.39\t\toffset\n",
      "-103.53\ttanh(1.22*x_1)\n",
      "20.83\ttanh(2.08*x_0)\n",
      "63.00\t(0.57*x_1+0.11*(0.25*x_0-0.23*sqrt(|0.18*x_3|)))\n",
      "-76.59\t(0.23*x_2*(1.00*x_0+0.21*x_1))\n",
      "-13.93\texp(0.27*x_3)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(fest.get_model(sort=False))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
