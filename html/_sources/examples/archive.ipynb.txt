{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Using Feat's archive\n",
    "\n",
    "Feat optimizes a population of models. \n",
    "At the end of the run, it can be useful to explore this population to find a trade-off between objectives, \n",
    "such as performance and complexity. \n",
    "\n",
    "In this example, we apply Feat to a regression problem and visualize the archive of representations. \n",
    "\n",
    "Note: this code uses the Penn ML Benchmark Suite (https://github.com/EpistasisLab/penn-ml-benchmarks/) to fetch data. You can install it using `pip install pmlb`.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First, we import the data and create a train-test split."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pmlb import fetch_data\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import mean_squared_error as mse\n",
    "import numpy as np\n",
    "# fix the random state\n",
    "random_state=42\n",
    "dataset='690_visualizing_galaxy'\n",
    "X, y = fetch_data(dataset,return_X_y=True)\n",
    "X_t,X_v, y_t, y_v = train_test_split(X,y,train_size=0.75,test_size=0.25,random_state=random_state)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then we set up a Feat instance and train the model, storing the final archive."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "FEAT version: 0.5.2.post75\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>FeatRegressor(backprop=False, batch_size=0, classification=False,\n",
       "              corr_delete_mutate=False, cross_rate=0.5, erc=False, fb=0.5,\n",
       "              feature_names=&#x27;&#x27;,\n",
       "              functions=[&#x27;+&#x27;, &#x27;-&#x27;, &#x27;*&#x27;, &#x27;/&#x27;, &#x27;^2&#x27;, &#x27;^3&#x27;, &#x27;sqrt&#x27;, &#x27;sin&#x27;, &#x27;cos&#x27;,\n",
       "                         &#x27;exp&#x27;, &#x27;log&#x27;, &#x27;^&#x27;, &#x27;logit&#x27;, &#x27;tanh&#x27;, &#x27;gauss&#x27;, &#x27;relu&#x27;,\n",
       "                         &#x27;split&#x27;, &#x27;split_c&#x27;, &#x27;b2f&#x27;, &#x27;c2f&#x27;, &#x27;and&#x27;, &#x27;or&#x27;, &#x27;not&#x27;,\n",
       "                         &#x27;xor&#x27;, &#x27;=&#x27;, &#x27;&lt;&#x27;, &#x27;&lt;=&#x27;, &#x27;&gt;&#x27;, &#x27;&gt;=&#x27;, &#x27;if&#x27;, ...],\n",
       "              gens=100, hillclimb=True, iters=10, logfile=&#x27;&#x27;, lr=0.1,\n",
       "              max_depth=2, max_dim=5, max_stall=0, max_time=60,\n",
       "              ml=&#x27;LinearRidgeRegression&#x27;, n_jobs=4, normalize=True,\n",
       "              objectives=[&#x27;fitness&#x27;, &#x27;complexity&#x27;], otype=&#x27;a&#x27;, pop_size=100,\n",
       "              protected_groups=&#x27;&#x27;, random_state=42, residual_xo=False,\n",
       "              root_xo_rate=0.5, save_pop=0, scorer=&#x27;&#x27;, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">FeatRegressor</label><div class=\"sk-toggleable__content\"><pre>FeatRegressor(backprop=False, batch_size=0, classification=False,\n",
       "              corr_delete_mutate=False, cross_rate=0.5, erc=False, fb=0.5,\n",
       "              feature_names=&#x27;&#x27;,\n",
       "              functions=[&#x27;+&#x27;, &#x27;-&#x27;, &#x27;*&#x27;, &#x27;/&#x27;, &#x27;^2&#x27;, &#x27;^3&#x27;, &#x27;sqrt&#x27;, &#x27;sin&#x27;, &#x27;cos&#x27;,\n",
       "                         &#x27;exp&#x27;, &#x27;log&#x27;, &#x27;^&#x27;, &#x27;logit&#x27;, &#x27;tanh&#x27;, &#x27;gauss&#x27;, &#x27;relu&#x27;,\n",
       "                         &#x27;split&#x27;, &#x27;split_c&#x27;, &#x27;b2f&#x27;, &#x27;c2f&#x27;, &#x27;and&#x27;, &#x27;or&#x27;, &#x27;not&#x27;,\n",
       "                         &#x27;xor&#x27;, &#x27;=&#x27;, &#x27;&lt;&#x27;, &#x27;&lt;=&#x27;, &#x27;&gt;&#x27;, &#x27;&gt;=&#x27;, &#x27;if&#x27;, ...],\n",
       "              gens=100, hillclimb=True, iters=10, logfile=&#x27;&#x27;, lr=0.1,\n",
       "              max_depth=2, max_dim=5, max_stall=0, max_time=60,\n",
       "              ml=&#x27;LinearRidgeRegression&#x27;, n_jobs=4, normalize=True,\n",
       "              objectives=[&#x27;fitness&#x27;, &#x27;complexity&#x27;], otype=&#x27;a&#x27;, pop_size=100,\n",
       "              protected_groups=&#x27;&#x27;, random_state=42, residual_xo=False,\n",
       "              root_xo_rate=0.5, save_pop=0, scorer=&#x27;&#x27;, ...)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "FeatRegressor(backprop=False, batch_size=0, classification=False,\n",
       "              corr_delete_mutate=False, cross_rate=0.5, erc=False, fb=0.5,\n",
       "              feature_names='',\n",
       "              functions=['+', '-', '*', '/', '^2', '^3', 'sqrt', 'sin', 'cos',\n",
       "                         'exp', 'log', '^', 'logit', 'tanh', 'gauss', 'relu',\n",
       "                         'split', 'split_c', 'b2f', 'c2f', 'and', 'or', 'not',\n",
       "                         'xor', '=', '<', '<=', '>', '>=', 'if', ...],\n",
       "              gens=100, hillclimb=True, iters=10, logfile='', lr=0.1,\n",
       "              max_depth=2, max_dim=5, max_stall=0, max_time=60,\n",
       "              ml='LinearRidgeRegression', n_jobs=4, normalize=True,\n",
       "              objectives=['fitness', 'complexity'], otype='a', pop_size=100,\n",
       "              protected_groups='', random_state=42, residual_xo=False,\n",
       "              root_xo_rate=0.5, save_pop=0, scorer='', ...)"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from feat import FeatRegressor\n",
    "\n",
    "\n",
    "est = FeatRegressor(\n",
    "    pop_size=100, # population size\n",
    "    gens=100, # maximum generations                            \n",
    "    max_time=60, # max time in seconds \n",
    "    max_depth=2, # constrain features depth                                                      \n",
    "    max_dim=5, # constrain representation dimensionality                                                      \n",
    "    random_state=random_state,                                                            \n",
    "    hillclimb=True, # use stochastic hillclimbing to optimize weights                                                   \n",
    "    iters=10, # iterations of hillclimbing\n",
    "    n_jobs=4, # restricts to single thread                                                      \n",
    ") \n",
    "\n",
    "\n",
    "print('FEAT version:', est.__version__)\n",
    "est"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>FeatRegressor(backprop=False, batch_size=0, classification=False,\n",
       "              corr_delete_mutate=False, cross_rate=0.5, erc=False, fb=0.5,\n",
       "              feature_names=&#x27;&#x27;,\n",
       "              functions=[&#x27;+&#x27;, &#x27;-&#x27;, &#x27;*&#x27;, &#x27;/&#x27;, &#x27;^2&#x27;, &#x27;^3&#x27;, &#x27;sqrt&#x27;, &#x27;sin&#x27;, &#x27;cos&#x27;,\n",
       "                         &#x27;exp&#x27;, &#x27;log&#x27;, &#x27;^&#x27;, &#x27;logit&#x27;, &#x27;tanh&#x27;, &#x27;gauss&#x27;, &#x27;relu&#x27;,\n",
       "                         &#x27;split&#x27;, &#x27;split_c&#x27;, &#x27;b2f&#x27;, &#x27;c2f&#x27;, &#x27;and&#x27;, &#x27;or&#x27;, &#x27;not&#x27;,\n",
       "                         &#x27;xor&#x27;, &#x27;=&#x27;, &#x27;&lt;&#x27;, &#x27;&lt;=&#x27;, &#x27;&gt;&#x27;, &#x27;&gt;=&#x27;, &#x27;if&#x27;, ...],\n",
       "              gens=100, hillclimb=True, iters=10, logfile=&#x27;&#x27;, lr=0.1,\n",
       "              max_depth=2, max_dim=5, max_stall=0, max_time=60,\n",
       "              ml=&#x27;LinearRidgeRegression&#x27;, n_jobs=4, normalize=True,\n",
       "              objectives=[&#x27;fitness&#x27;, &#x27;complexity&#x27;], otype=&#x27;a&#x27;, pop_size=100,\n",
       "              protected_groups=&#x27;&#x27;, random_state=42, residual_xo=False,\n",
       "              root_xo_rate=0.5, save_pop=0, scorer=&#x27;&#x27;, ...)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">FeatRegressor</label><div class=\"sk-toggleable__content\"><pre>FeatRegressor(backprop=False, batch_size=0, classification=False,\n",
       "              corr_delete_mutate=False, cross_rate=0.5, erc=False, fb=0.5,\n",
       "              feature_names=&#x27;&#x27;,\n",
       "              functions=[&#x27;+&#x27;, &#x27;-&#x27;, &#x27;*&#x27;, &#x27;/&#x27;, &#x27;^2&#x27;, &#x27;^3&#x27;, &#x27;sqrt&#x27;, &#x27;sin&#x27;, &#x27;cos&#x27;,\n",
       "                         &#x27;exp&#x27;, &#x27;log&#x27;, &#x27;^&#x27;, &#x27;logit&#x27;, &#x27;tanh&#x27;, &#x27;gauss&#x27;, &#x27;relu&#x27;,\n",
       "                         &#x27;split&#x27;, &#x27;split_c&#x27;, &#x27;b2f&#x27;, &#x27;c2f&#x27;, &#x27;and&#x27;, &#x27;or&#x27;, &#x27;not&#x27;,\n",
       "                         &#x27;xor&#x27;, &#x27;=&#x27;, &#x27;&lt;&#x27;, &#x27;&lt;=&#x27;, &#x27;&gt;&#x27;, &#x27;&gt;=&#x27;, &#x27;if&#x27;, ...],\n",
       "              gens=100, hillclimb=True, iters=10, logfile=&#x27;&#x27;, lr=0.1,\n",
       "              max_depth=2, max_dim=5, max_stall=0, max_time=60,\n",
       "              ml=&#x27;LinearRidgeRegression&#x27;, n_jobs=4, normalize=True,\n",
       "              objectives=[&#x27;fitness&#x27;, &#x27;complexity&#x27;], otype=&#x27;a&#x27;, pop_size=100,\n",
       "              protected_groups=&#x27;&#x27;, random_state=42, residual_xo=False,\n",
       "              root_xo_rate=0.5, save_pop=0, scorer=&#x27;&#x27;, ...)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "FeatRegressor(backprop=False, batch_size=0, classification=False,\n",
       "              corr_delete_mutate=False, cross_rate=0.5, erc=False, fb=0.5,\n",
       "              feature_names='',\n",
       "              functions=['+', '-', '*', '/', '^2', '^3', 'sqrt', 'sin', 'cos',\n",
       "                         'exp', 'log', '^', 'logit', 'tanh', 'gauss', 'relu',\n",
       "                         'split', 'split_c', 'b2f', 'c2f', 'and', 'or', 'not',\n",
       "                         'xor', '=', '<', '<=', '>', '>=', 'if', ...],\n",
       "              gens=100, hillclimb=True, iters=10, logfile='', lr=0.1,\n",
       "              max_depth=2, max_dim=5, max_stall=0, max_time=60,\n",
       "              ml='LinearRidgeRegression', n_jobs=4, normalize=True,\n",
       "              objectives=['fitness', 'complexity'], otype='a', pop_size=100,\n",
       "              protected_groups='', random_state=42, residual_xo=False,\n",
       "              root_xo_rate=0.5, save_pop=0, scorer='', ...)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# train the model\n",
    "est.fit(X_t,y_t)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "complexity fitness validation fitness eqn\n",
      "1 1834.9365234375 1672.86279296875 [x_1]\n",
      "2 978.2460327148438 810.285400390625 [x_1][x_3]\n",
      "3 948.1231689453125 814.2865600585938 [x_3][x_0][x_1]\n",
      "4 915.998291015625 787.1356811523438 [x_3][x_2][x_0][x_1]\n",
      "6 915.9979858398438 787.1354370117188 [x_1][(0.5418*x_1-0.5815*x_0)][x_2][x_3]\n",
      "7 542.2037963867188 533.512939453125 [x_3][tanh(0.8951*x_1)]\n",
      "8 465.80938720703125 503.4342041015625 [x_1][tanh(0.8951*x_1)][x_3]\n",
      "9 428.57049560546875 431.0047912597656 [x_2][tanh(0.8951*x_1)][x_1][x_3]\n",
      "10 394.3541564941406 405.9887390136719 [x_3][tanh(0.8951*x_1)][x_2][x_0][x_1]\n",
      "12 394.3539733886719 405.9885559082031 [x_2][tanh(0.8951*x_1)][x_3][(0.5418*x_1-0.5815*x_0)][x_0]\n",
      "13 380.3902893066406 468.53033447265625 [x_2][tanh(0.8951*x_1)][relu(0.7307*x_3)][x_1][x_0]\n",
      "14 379.486328125 368.8024597167969 [x_1][tanh(0.8951*x_1)][x_2][sin(0.9585*x_3)]\n",
      "15 354.5791320800781 383.6985168457031 [x_3][tanh(0.8951*x_1)][x_2][sin(0.9398*x_0)][x_1]\n",
      "17 344.9056701660156 373.0729675292969 [x_2][tanh(0.8951*x_1)][x_3][(0.5418*x_1-0.5815*x_0)][tanh(0.8951*x_0)]\n",
      "18 328.8770751953125 414.16217041015625 [relu(0.7307*x_3)][tanh(0.8951*x_1)][x_2][sin(0.9398*x_0)][x_1]\n",
      "20 319.9519348144531 402.3149719238281 [x_2][tanh(0.8951*x_1)][relu(0.7307*x_3)][(0.5418*x_1-0.5815*x_0)][tanh(0.8951*x_0)]\n",
      "22 313.8825988769531 391.0963439941406 [x_2][tanh(0.8951*x_1)][relu(0.7307*x_3)][(0.5418*x_1-0.5815*(0.5418*x_1-0.5815*x_0))][tanh(0.8951*x_0)]\n",
      "24 313.66217041015625 378.6908874511719 [sqrt(|0.1721*relu(0.7307*x_3)|)][tanh(0.8951*x_1)][x_2][sin(0.9398*x_0)][x_1]\n",
      "29 308.3426208496094 386.4595031738281 [tanh(0.8951*x_1)][sqrt(|0.6298*relu(0.7307*x_3)|)][x_1][tanh(0.8951*x_0)][(x_2<=x_1)]\n",
      "34 304.9555969238281 392.111328125 [gauss(relu(0.7307*x_3))][tanh(0.8951*x_1)][x_2][sin(0.9398*x_0)][x_1]\n",
      "37 290.0493469238281 378.2729187011719 [((0.8126*x_2^3)>=x_1)][tanh(0.8951*x_1)][relu(0.7307*x_3)][(0.5418*x_1-0.5815*(0.5418*x_1-0.5815*x_0))][tanh(0.8951*x_0)]\n",
      "49 278.4764099121094 384.1788330078125 [gauss(relu(0.7307*x_3))][tanh(0.8951*x_1)][((0.8126*x_2^3)>=x_1)][sin(0.9398*x_0)][x_1]\n",
      "54 278.0923767089844 383.3207702636719 [gauss(relu(0.7307*x_3))][tanh(0.8951*x_1)][((0.8126*x_2^3)>=x_1)][sin(0.9398*x_0)][tanh(0.1940*x_1)]\n",
      "55 286.6203308105469 331.2903747558594 [tanh(0.8951*x_1)][relu(0.7307*x_3)][x_1][gauss(tanh(0.8951*x_0))][((0.8126*x_2^3)>=x_1)]\n",
      "59 277.9620056152344 388.03424072265625 [gauss(relu(0.7307*x_3))][tanh(0.8951*x_1)][((0.8126*x_2^3)>=sin(0.6267*x_1))][sin(0.9398*x_0)][x_1]\n",
      "114 266.8835754394531 343.7061767578125 [tanh(0.8951*x_1)][sin(0.5094*gauss(relu(0.7307*x_3)))][x_1][gauss(tanh(0.8951*x_0))][((0.8126*x_2^3)>=x_1)]\n",
      "153 261.151123046875 357.7651062011719 [tanh(0.8951*x_1)][((0.8496*gauss(relu(0.7307*x_3)))^2)][x_1][gauss(tanh(0.8951*sin(0.9398*x_0)))][((0.8126*x_2^3)>=x_1)]\n",
      "244 257.5480651855469 345.8831481933594 [tanh(0.8951*x_1)][((0.8496*sin(0.5094*gauss(relu(0.7307*x_3))))^2)][sin(0.6267*x_1)][gauss(tanh(0.8951*sin(0.9398*x_0)))][((0.8126*x_2^3)>=x_1)]\n"
     ]
    }
   ],
   "source": [
    "# get the test score\n",
    "test_score = {}\n",
    "test_score['feat'] = mse(y_v,est.predict(X_v))\n",
    "\n",
    "# store the archive\n",
    "archive = est.cfeat_.get_archive(True)\n",
    "\n",
    "# print the archive\n",
    "print('complexity','fitness','validation fitness',\n",
    "     'eqn')\n",
    "order = np.argsort([a['complexity'] for a in archive])\n",
    "complexity = []\n",
    "fit_train = []\n",
    "fit_test = []\n",
    "eqn = []\n",
    "\n",
    "for o in order:\n",
    "    model = archive[o]\n",
    "    if model['rank'] == 1:\n",
    "        print(model['complexity'],\n",
    "              model['fitness'],\n",
    "              model['fitness_v'],\n",
    "              model['eqn'],\n",
    "             )\n",
    "\n",
    "        complexity.append(model['complexity'])\n",
    "        fit_train.append(model['fitness'])\n",
    "        fit_test.append(model['fitness_v'])\n",
    "        eqn.append(model['eqn'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "scrolled": true
   },
   "source": [
    "For comparison, we can fit an Elastic Net and Random Forest regression model to the same data.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.ensemble import RandomForestRegressor\n",
    "\n",
    "rf = RandomForestRegressor(random_state=random_state)\n",
    "\n",
    "rf.fit(X_t,y_t)\n",
    "\n",
    "test_score['rf'] = mse(y_v,rf.predict(X_v))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import ElasticNet\n",
    "\n",
    "linest = ElasticNet()\n",
    "\n",
    "linest.fit(X_t,y_t)\n",
    "\n",
    "test_score['elasticnet'] = mse(y_v,linest.predict(X_v))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's look at the test set mean squared errors by method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'feat': 381.70598775221976,\n",
       " 'rf': 347.15749506172847,\n",
       " 'elasticnet': 919.3515337699572}"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_score"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Visualizing the Archive\n",
    "\n",
    "Let's visualize this archive with the test scores. This gives us a sense of how increasing the representation\n",
    "complexity affects the quality of the model and its generalization.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "best: 55\n",
      "middle: 14\n",
      "small: 3\n",
      "complexity [1, 2, 3, 4, 6, 7, 8, 9, 10, 12, 13, 14, 15, 17, 18, 20, 22, 24, 29, 34, 37, 49, 54, 55, 59, 114, 153, 244]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1400x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import math\n",
    "\n",
    "matplotlib.rcParams['figure.figsize'] = (10, 6)\n",
    "%matplotlib inline \n",
    "sns.set_style('white')\n",
    "h = plt.figure(figsize=(14,8))\n",
    "\n",
    "# plot archive points \n",
    "plt.plot(fit_train,complexity,'--ro',label='Train',markersize=6)\n",
    "plt.plot(fit_test,complexity,'--bx',label='Validation')\n",
    "# some models to point out\n",
    "best = np.argmin(np.array(fit_test))\n",
    "middle = np.argmin(np.abs(np.array(fit_test[:best])-test_score['rf']))\n",
    "small = np.argmin(np.abs(np.array(fit_test[:middle])-test_score['elasticnet']))\n",
    "\n",
    "print('best:',complexity[best])\n",
    "print('middle:',complexity[middle])\n",
    "print('small:',complexity[small])\n",
    "plt.plot(fit_test[best],complexity[best],'sk',markersize=16,markerfacecolor='none',label='Model Selection')\n",
    "\n",
    "# test score lines\n",
    "y1 = -1\n",
    "y2 = np.max(complexity)+1\n",
    "plt.plot((test_score['feat'],test_score['feat']),(y1,y2),'--k',label='FEAT Test',alpha=0.5)\n",
    "plt.plot((test_score['rf'],test_score['rf']),(y1,y2),'-.xg',label='RF Test',alpha=0.5)\n",
    "plt.plot((test_score['elasticnet'],test_score['elasticnet']),(y1,y2),'-sm',label='ElasticNet Test',alpha=0.5)\n",
    "\n",
    "print('complexity',complexity)\n",
    "xoff = 100\n",
    "for e,t,c in zip(eqn,fit_test,complexity):\n",
    "    if c in [complexity[best],complexity[middle],complexity[small]]:\n",
    "        t = t+xoff\n",
    "        tax = plt.text(t,c,'$\\leftarrow'+e+'$',size=18,horizontalalignment='left',\n",
    "                      verticalalignment='center')\n",
    "        tax.set_bbox(dict(facecolor='white', alpha=0.75, edgecolor='k'))\n",
    "\n",
    "l = plt.legend(prop={'size': 16},loc=[1.01,0.25])\n",
    "plt.xlabel('MSE',size=16)\n",
    "plt.xlim(np.min(fit_train)*.75,np.max(fit_test)*2)\n",
    "plt.gca().set_xscale('log')\n",
    "plt.gca().set_yscale('log')\n",
    "\n",
    "plt.gca().set_yticklabels('')\n",
    "plt.gca().set_xticklabels('')\n",
    "\n",
    "plt.ylabel('Complexity',size=18)\n",
    "h.tight_layout()\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Note that ElasticNet produces a similar test score to the linear representation\n",
    "in Feat's archive, and that Random Forest's test score is near the representation shown in the middle.\n",
    "\n",
    "The best model, marked with a square, is selected from the validation curve (blue line).\n",
    "The validation curve shows how models begin to overfit as complexity grows.\n",
    "By visualizing the archive, we can see that some lower complexity models achieve nearly as good of a validation score.\n",
    "In this case it may be preferable to choose that representation instead."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "By default, FEAT will choose the model with the lowest validation error, marked with a square above. \n",
    "Let's look at that model.\n",
    "\n",
    "the function `get_model()` will print a table of the learned features, optionally ordered by the magnitude of their weights."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Weight\tFeature\n",
      "1547.33\toffset\n",
      "-182.50\ttanh(0.8951*x_1)\n",
      "37.58\trelu(0.7307*x_3)\n",
      "40.92\tx_1\n",
      "69.79\tgauss(tanh(0.8951*x_0))\n",
      "-17.11\t((0.8126*x_2^3)>=x_1)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(est.get_model(False))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
